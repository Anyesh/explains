# principle of normalization

1NF (First Normal Form): A table is in 1NF if it contains no repeating groups or arrays. Each column should contain a single value, and each row should be unique. For example, if we have a table of customer orders, each order should have its own row and contain all relevant information about that order (e.g., order ID, customer name, order date, product name, quantity, price).

2NF (Second Normal Form): A table is in 2NF if it is in 1NF and every non-key column is fully dependent on the primary key. In other words, if a table has a composite primary key (made up of multiple columns), each non-key column should be dependent on the entire key, not just a part of it. For example, if we have a table of employee sales, where the primary key is a composite of employee ID and sales date, each non-key column (e.g., employee name, product name, quantity, price) should depend on both the employee ID and the sales date.

3NF (Third Normal Form): A table is in 3NF if it is in 2NF and every non-key column is not transitively dependent on the primary key. In other words, if a non-key column depends on another non-key column, it should be moved to a separate table. For example, if we have a table of customer orders with columns for customer name, city, and state, and we find that the city and state are dependent on the customer name (i.e., multiple customers can have the same city and state), we should create a separate table of customers with columns for customer name, customer ID, city, and state. Then, we can reference the customer ID in the order table instead of repeating the city and state for each order.

As an example, let's say we have a table of student records with the following columns: student ID, first name, last name, date of birth, grade, subject, and teacher. This table violates 2NF because the grade and subject columns are dependent on the teacher column, which is not part of the primary key. To bring this table to 2NF, we would need to create a separate table of teachers with columns for teacher ID, first name, and last name, and reference the teacher ID in the student records table. Then, we would also need to move the grade and subject columns to a separate table, keyed on the student ID and subject columns. Finally, to bring this table to 3NF, we would also need to create a separate table for subjects, keyed on the subject column, and reference the subject ID in the student records table.

## Referential Integrity

Referential integrity is a fundamental principle of relational databases that ensures that relationships between tables are valid and consistent. It is typically enforced through the use of foreign keys, which are columns in a child table that reference the primary key of a parent table.

In normalization, the rules for ensuring referential integrity are implied in the higher normal forms. For example, in 2NF, every non-key column must be fully dependent on the primary key. This means that if a table has a foreign key column, it must reference the entire primary key of the parent table, and not just part of it. In 3NF, every non-key column must be non-transitively dependent on the primary key, which means that if a foreign key column depends on another non-key column, it must be moved to a separate table.

The use of foreign keys is not explicitly stated as a rule in normalization, but it is an important concept that is closely related to the principles of normalization, particularly referential integrity. By using foreign keys to enforce referential integrity, we can ensure that the relationships between tables are valid and consistent, which can help to maintain data integrity and prevent errors and inconsistencies in the database.